{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic Usage\n",
    "\n",
    "The goal of the task-geo project is to download and generate datasets from a collection\n",
    "of data sources.\n",
    "\n",
    "In this notebook we show how to use them.\n",
    "\n",
    "## Selecting a Data Source\n",
    "\n",
    "The first thing to do is to select the data source that we want to use.\n",
    "\n",
    "We can see the list of all the available data sources by using the `task_geo.data_sources.list_data_sources` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['noaa_api', 'cds', 'us_census', 'nyt']"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from task_geo.data_sources import list_data_sources\n",
    "\n",
    "data_sources = list_data_sources()\n",
    "data_sources"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this example we will be using the `noaa_api` one."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_source_name = 'noaa_api'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loading a Data Source\n",
    "\n",
    "Once we have selected the data source that we want to use, we can load it using the\n",
    "`task_geo.data_sources.get_data_source` function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function task_geo.data_sources.noaa.noaa_api(countries, start_date, end_date, metrics=None)>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from task_geo.data_sources import get_data_source\n",
    "\n",
    "noaa_api = get_data_source('noaa_api')\n",
    "noaa_api"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This will return a function that we can directly use to download data.\n",
    "\n",
    "In order to see all the details about what it does and the arguments that it needs to be passed\n",
    "we can use the Python builting function `help`, which will print us all its documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on function noaa_api in module task_geo.data_sources.noaa:\n",
      "\n",
      "noaa_api(countries, start_date, end_date, metrics=None)\n",
      "    NOAA API Data Source.\n",
      "    \n",
      "    Arguments:\n",
      "        countries(list[str]):\n",
      "            List of country names in FIPS format.\n",
      "        start_date(datetime):\n",
      "            Start date for the data.\n",
      "        end_date(datetime):\n",
      "            End date for the date. (Optional, if not present will be set to the current day.)\n",
      "        metrics(list[str]): Optional.List of metrics to retrieve,valid values are:\n",
      "            TMIN: Minimum temperature.\n",
      "            TMAX: Maximum temperature.\n",
      "            TAVG: Average of temperature.\n",
      "            SNOW: Snowfall (mm).\n",
      "            SNWD: Snow depth (mm).\n",
      "    \n",
      "    Example:\n",
      "    >>> from datetime import datetime\n",
      "    >>> countries = ['FR']\n",
      "    >>> start_date = datetime(2020, 1, 1)\n",
      "    >>> end_date = datetime(2020, 1, 15)\n",
      "    >>> noaa_api(countries, start_date, end_date)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(noaa_api)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the Data Source\n",
    "\n",
    "All the returned data sources will be functions that can be directly called.\n",
    "\n",
    "For example, let's use the `noaa_api` function that we just loaded to get data from NOAA stations in\n",
    "France between `2020-01-01` and `2020-01-15`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-04-03 20:01:18,466 - INFO - ftp_connector - Connecting to NOAA FTP server.\n",
      "2020-04-03 20:03:00,211 - INFO - api_connector - Requesting data for FR\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "\n",
    "data = noaa_api(\n",
    "    ['FR'],\n",
    "    start_date=datetime(2020, 1, 1),\n",
    "    end_date=datetime(2020, 1, 15)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "      <th>country</th>\n",
       "      <th>name</th>\n",
       "      <th>date</th>\n",
       "      <th>station</th>\n",
       "      <th>tmax</th>\n",
       "      <th>tmin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>10.4</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>11.0</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-03</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>13.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>10.4</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>9.5</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude  elevation country               name       date  \\\n",
       "0   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-01   \n",
       "1   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-02   \n",
       "2   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-03   \n",
       "3   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-04   \n",
       "4   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-05   \n",
       "\n",
       "       station  tmax tmin  \n",
       "0  FR000007130  10.4  4.8  \n",
       "1  FR000007130  11.0  7.8  \n",
       "2  FR000007130  13.1  NaN  \n",
       "3  FR000007130  10.4  1.4  \n",
       "4  FR000007130   9.5  3.0  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
