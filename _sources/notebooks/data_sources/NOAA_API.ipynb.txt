{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# NOAA Data Source\n",
    "\n",
    "This notebooks shows how to use retrieve data from NOAA, there are two ways of doing so:\n",
    "\n",
    "- **By FTP**: It's the easier way, but it will download the bulk of the data(3Gb+), so it may take some time.\n",
    "- **By API**: It's the cleaner way, as it provides more granular access.\n",
    "\n",
    "Please note that in order to use the API, some required reference files will be downloaded too."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the API\n",
    "\n",
    "To use the API, you just need to pass the list of countries and the start and end dates, you can see an example below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2020-04-03 18:17:07,112 - INFO - ftp_connector - Connecting to NOAA FTP server.\n",
      "2020-04-03 18:17:59,726 - INFO - api_connector - Requesting data for FR\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "from task_geo.data_sources.noaa import noaa_api\n",
    "\n",
    "start_date = datetime(2020, 1, 1)\n",
    "end_date = datetime(2020, 1, 15)\n",
    "countries = ['FR']\n",
    "\n",
    "data = noaa_api(countries, start_date, end_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>elevation</th>\n",
       "      <th>country</th>\n",
       "      <th>name</th>\n",
       "      <th>date</th>\n",
       "      <th>station</th>\n",
       "      <th>tmax</th>\n",
       "      <th>tmin</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>10.4</td>\n",
       "      <td>4.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-02</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>11.0</td>\n",
       "      <td>7.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-03</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>13.1</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-04</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>10.4</td>\n",
       "      <td>1.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>48.0689</td>\n",
       "      <td>-1.7339</td>\n",
       "      <td>36.0</td>\n",
       "      <td>France</td>\n",
       "      <td>RENNES-ST JACQUES</td>\n",
       "      <td>2020-01-05</td>\n",
       "      <td>FR000007130</td>\n",
       "      <td>9.5</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude  elevation country               name       date  \\\n",
       "0   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-01   \n",
       "1   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-02   \n",
       "2   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-03   \n",
       "3   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-04   \n",
       "4   48.0689    -1.7339       36.0  France  RENNES-ST JACQUES 2020-01-05   \n",
       "\n",
       "       station  tmax tmin  \n",
       "0  FR000007130  10.4  4.8  \n",
       "1  FR000007130  11.0  7.8  \n",
       "2  FR000007130  13.1  NaN  \n",
       "3  FR000007130  10.4  1.4  \n",
       "4  FR000007130   9.5  3.0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using the FTP\n",
    "\n",
    "To download the bulk of the files you just need to run the code in the cell below, it will download the files and extract the compressed ones:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from ftp import download_noaa_files, process_noaa_data\n",
    "\n",
    "download_noaa_files()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have downloaded the files, in order to load the data from our local disk and retrieve a `pandas.DataFrame` with data, we just need to pass it to `process_noaa_files` with a list of FIPS codes for the countries we want data from.\n",
    "\n",
    "For more info FIPS codes, visit the wikipedia page: https://en.wikipedia.org/wiki/List_of_FIPS_country_codes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "countries = ['FR'] # We use the FIPS code to identify the countries \n",
    "data = process_noaa_data(countries)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
